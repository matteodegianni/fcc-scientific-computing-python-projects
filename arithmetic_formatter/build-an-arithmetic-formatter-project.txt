** start of main.py **

def arithmetic_arranger(problems, show_answers=False):

    return problems

print(f'\n{arithmetic_arranger(["32 + 698", "3801 - 2", "45 + 43", "123 + 49"])}')

def arithmetic_arranger(problems, show_answers=False):
    # Controllo massimo 5 problemi
    if len(problems) > 5:
        return "Error: Too many problems."

    # Liste per le righe
    first_line = []
    second_line = []
    separator_line = []
    result_line = []

    for problem in problems:
        # Divide ogni problema in parti
        parts = problem.split()
        num1, operator, num2 = parts

        # Controlli degli errori
        if operator not in ['+', '-']:
            return "Error: Operator must be '+' or '-'."
        if not (num1.isdigit() and num2.isdigit()):
            return "Error: Numbers must only contain digits."
        if len(num1) > 4 or len(num2) > 4:
            return "Error: Numbers cannot be more than four digits."

        # Calcolo larghezza colonna
        width = max(len(num1), len(num2)) + 2

        # Formattazione righe
        first_line.append(num1.rjust(width))
        second_line.append(operator + num2.rjust(width - 1))
        separator_line.append('-' * width)

        # Calcolo risultato se richiesto
        if show_answers:
            if operator == '+':
                result = str(int(num1) + int(num2))
            else:
                result = str(int(num1) - int(num2))
            result_line.append(result.rjust(width))

    # Unisci righe con 4 spazi tra le operazioni
    arranged = '    '.join(first_line) + '\n' + \
               '    '.join(second_line) + '\n' + \
               '    '.join(separator_line)

    # Aggiungi risultati se richiesto
    if show_answers:
        arranged += '\n' + '    '.join(result_line)

    return arranged


# Esempio di test
problems = ["32 + 698", "3801 - 2", "45 + 43", "123 + 49"]
print(arithmetic_arranger(problems, True))


** end of main.py **

